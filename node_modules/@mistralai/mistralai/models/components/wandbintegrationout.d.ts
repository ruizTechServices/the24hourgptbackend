import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
export declare const Type: {
    readonly Wandb: "wandb";
};
export type Type = ClosedEnum<typeof Type>;
export type WandbIntegrationOut = {
    type?: "wandb" | undefined;
    /**
     * The name of the project that the new run will be created under.
     */
    project: string;
    /**
     * A display name to set for the run. If not set, will use the job ID as the name.
     */
    name?: string | null | undefined;
    runName?: string | null | undefined;
};
/** @internal */
export declare const Type$inboundSchema: z.ZodNativeEnum<typeof Type>;
/** @internal */
export declare const Type$outboundSchema: z.ZodNativeEnum<typeof Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Wandb: "wandb";
    }>;
    /** @deprecated use `Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Wandb: "wandb";
    }>;
}
/** @internal */
export declare const WandbIntegrationOut$inboundSchema: z.ZodType<WandbIntegrationOut, z.ZodTypeDef, unknown>;
/** @internal */
export type WandbIntegrationOut$Outbound = {
    type: "wandb";
    project: string;
    name?: string | null | undefined;
    run_name?: string | null | undefined;
};
/** @internal */
export declare const WandbIntegrationOut$outboundSchema: z.ZodType<WandbIntegrationOut$Outbound, z.ZodTypeDef, WandbIntegrationOut>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WandbIntegrationOut$ {
    /** @deprecated use `WandbIntegrationOut$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WandbIntegrationOut, z.ZodTypeDef, unknown>;
    /** @deprecated use `WandbIntegrationOut$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WandbIntegrationOut$Outbound, z.ZodTypeDef, WandbIntegrationOut>;
    /** @deprecated use `WandbIntegrationOut$Outbound` instead. */
    type Outbound = WandbIntegrationOut$Outbound;
}
//# sourceMappingURL=wandbintegrationout.d.ts.map